var documenterSearchIndex = {"docs":
[{"location":"api/#API","page":"API","title":"API","text":"","category":"section"},{"location":"api/#Structs","page":"API","title":"Structs","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"struct ENDB\n    endpoint::String\n    http_options::Dict\nend","category":"page"},{"location":"api/#Functions","page":"API","title":"Functions","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"","category":"page"},{"location":"api/#Endatabas.query-Tuple{ENDB, String, Any}","page":"API","title":"Endatabas.query","text":"query(db::ENDB, sql::String, params; bulk::Bool=false)\n\nSend a query to the database and return the resultset.\n\njulia> endb = ENDB()\nENDB(\"http://localhost:3803/sql\", Dict{Any, Any}())\n\njulia> query(endb, \"SELECT 1\")\n1-element JSON3.Array{JSON3.Array, Vector{UInt8}, Vector{UInt64}}:\n [1]\n\n\n\n\n\n","category":"method"},{"location":"examples/#Examples","page":"Examples","title":"Examples","text":"","category":"section"},{"location":"examples/#Authentication","page":"Examples","title":"Authentication","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"Create the ENDB struct with a username and password like this.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"endb = ENDB(\"http://username:password@localhost:3803/sql\")","category":"page"},{"location":"examples/#Positional-Parameters","page":"Examples","title":"Positional Parameters","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"Use ? to denote a positional parameter, and pass in a Vector of values to be used as a substitution.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"query(endb, \"SELECT id, title FROM issues WHERE id > ?\", [5])","category":"page"},{"location":"examples/#Named-Parameters","page":"Examples","title":"Named Parameters","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"Use symbols with a leading \":\" (like :id in this example) and pass in a Dict with keys and values to be used as substitutions.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"query(endb, \"SELECT id, title FROM issues WHERE id > :id\", Dict(:id => 5))","category":"page"},{"location":"examples/#Bulk-Insert","page":"Examples","title":"Bulk Insert","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"Bulk insert using positional parameters is done by passing in a  Vector of Vectors and setting bulk=true.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"query(endb, \"INSERT INTO issues (id, title) VALUES (?, ?)\", \n    [\n        [1, \"Weird query crashes server\"],\n        [2, \"Obscure query returns wrong results\"]\n    ]; \n    bulk=true\n)","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"Bulk insert with named parameters is done by passing in a Vector of Dicts and setting bulk=true.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"query(endb, \"INSERT INTO issues {id: :id, title: :title}\",\n    [\n        Dict(:id => 3, :title => \"Unique constraint not working\"),\n        Dict(:id => 4, :title => \"Erasure failed\")\n    ];\n    bulk=true\n)","category":"page"},{"location":"links/#Links","page":"Links","title":"Links","text":"","category":"section"},{"location":"links/","page":"Links","title":"Links","text":"Official website\nGitHub: endatabas/endb\nTwitter: @endatabas\nMastodon: @endatabas\nYouTube: endatabas","category":"page"},{"location":"#Endatabas.jl","page":"Home","title":"Endatabas.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Endatabas.jl is a Julia client for the Endatabas database.","category":"page"},{"location":"#What-is-Endatabas?","page":"Home","title":"What is Endatabas?","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Endatabas is one of the most fascinating databases I've encountered recently.\nIt's schemaless\n...but it can be queried with SQL.\nYou can just start inserting data and tables will autovivify.\nThe rows you insert can contain nested data.\nRows are structured documents.\nIts dialect of SQL can have a JSON-ish accent at times which feels natural if you're accustomed to JSON.\nIt maintains an \"immutable\" history of the database, and you can query the database about past states.\nIt was written by the developer of XTDB which is another database that cares about time and history.\nIt's implemented in a combination of Rust and Common Lisp.\nThey have a docker container that makes it really easy to get started with it.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"julia> ]\n\n(v1.10) pkg> add Endatabas","category":"page"},{"location":"#Usage","page":"Home","title":"Usage","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"# This exports ENDB and query()\nusing Endatabas \n\n# Construct ENDB handle\nendb = ENDB()\n\n# Query\nquery(endb, \"INSERT INTO issues {id: 1, title: ?}\", [\"Weird query crashes server\"])\nquery(endb, \"SELECT * FROM issues\")\nquery(endb, \"SELECT id, title FROM issues\")\nquery(endb, \"SELECT {id, title} FROM issues\")","category":"page"}]
}
